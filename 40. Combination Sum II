/*
从数组中获取和为target的集合
递归
*/

class Solution {
public:
    void dfs(vector<int>& candidates, vector<vector<int>>& ans, vector<int> cnt, int idx, int target)
    {
        if(target == 0)
        {
            ans.push_back(cnt);
        }
        else
        {
            for(int i = idx; i < candidates.size() && candidates[i] <= target; ++i)
            {
                if(i != idx && candidates[i] == candidates[i-1])
                    continue;
                
                cnt.push_back(candidates[i]);
                dfs(candidates, ans, cnt, i+1, target-candidates[i]);
                cnt.pop_back();
                
            }
        }
    }
    
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        vector<vector<int>> ans;
        vector<int> cnt;
        dfs(candidates, ans, cnt, 0, target);
        return ans;
    }
};
